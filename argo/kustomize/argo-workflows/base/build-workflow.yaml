apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  generateName: webhook-
  name: build-pipeline
spec:
  entrypoint: pipeline
  serviceAccountName: workflow
  templates:
    - name: pipeline
      dag:
        tasks:
          - name: git-difference
            template: git-difference
            arguments:
              parameters:
                - name: message
                  value: "{}"
                - name: repo_owner
                  value: "luca-iachini"
                - name: repo_name
                  value: "argocd-test"
          - name: build
            template: build
            arguments:
              parameters:
                - name: package
                  value: "{{item}}"
            withParam: "{{tasks.git-difference.outputs.parameters.packages}}"
            dependencies:
              - git-difference
          - name: test
            template: test
            arguments:
              parameters:
                - name: package
                  value: "{{tasks.build.outputs.parameters.package}}"
            dependencies:
              - build
          - name: promote
            template: promote
            arguments:
              parameters:
                - name: package
                  value: "{{tasks.test.outputs.parameters.package}}"
                - name: repo_owner
                  value: "luca-iachini"
                - name: repo_name
                  value: "argocd-test"
            dependencies:
              - test
    - name: git-difference
      inputs:
        parameters:
          - name: message
          - name: repo_owner
          - name: repo_name
      script:
        image: makocchi/alpine-git-curl-jq:latest
        command: [sh]
        source: |
          git clone https://github.com/{{inputs.parameters.repo_owner}}/{{inputs.parameters.repo_name}}.git
          cd {{inputs.parameters.repo_name}}
          packages=$(git log --format= -n 1 --name-only | sed -nE 's/^go\/(.*)\/.*$/\1/p' | sort | uniq)
          json=""
          for package in $packages
          do
            [ ! -z "$package" ] && json="$json\"$package\","
          done
          echo "[${json::-1}]" > /mnt/out/packages
        volumeMounts:
          - name: out
            mountPath: /mnt/out
      outputs:
        parameters:
        - name: packages
          valueFrom:
            path: /mnt/out/packages
      volumes:
        - name: out
          emptyDir: { }
    - name: build
      inputs:
        parameters:
          - name: package
            value: "test"
      outputs:
        parameters:
          - name: package
            value: "{{input.parameters.package}}"
      script:
        image: makocchi/alpine:latest
        command: [sh]
        source: |
          echo "building package {{inputs.parameters.package}}"
    - name: test
      inputs:
        parameters:
          - name: package
            value: "test"
      outputs:
        parameters:
          - name: package
            value: "{{input.parameters.package}}"
      script:
        image: makocchi/alpine:latest
        command: [sh]
        source: |
          echo "testing package {{inputs.parameters.package}}"
    - name: promote
      inputs:
        parameters:
          - name: package
          - name: repo_owner
          - name: repo_name
      script:
        image: smartive/kustomize:latest
        command: [sh]
        source: |
          echo "promoting package {{inputs.parameters.package}}"
          set -e
          git clone https://$(cat /.github/token)@github.com/{{inputs.parameters.repo_owner}}/{{inputs.parameters.repo_name}}
          cd {{inputs.parameters.repo_name}}
          git config user.name "$(cat /.github/user)"
          git config user.email "$(cat /.github/email)"
          cd kustomize/base/{{inputs.parameters.package}}
          kustomize edit set image alpine:3.6
          git add .
          git commit -m "Upgraded {{inputs.parameters.package}} image tag"
          git push
      volumeMounts:
      - name: github-access
        mountPath: /.github/
        volumeMounts:
          - name: github-access
            mountPath: /.github/
      volumes:
        - name: github-access
          secret:
            secretName: github-access
            items:
              - key: token
                path: token
              - key: email
                path: email
              - key: user
                path: user